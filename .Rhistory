geom_text_interactive(
mapping = aes(
label = atomic.number,
data_id = atomic.number
),
size = 4/.pt,
hjust = 0,
vjust = 0.5,
nudge_x = -0.4,
nudge_y = 0.35
) +
# add name to each square
geom_text_interactive(
mapping = aes(
label = name,
data_id = atomic.number
),
size = 3/.pt,
hjust = 0,
vjust = 0.5,
nudge_x = -0.4,
nudge_y = -0.2
) +
# add atomic mass to each square
geom_text_interactive(
mapping = aes(
label = atomic.mass,
data_id = atomic.number
),
size = 3/.pt,
hjust = 0,
vjust = 0.5,
nudge_x = -0.4,
nudge_y = -0.35
) +
# for mouseover, set alpha very low
geom_tile_interactive(
mapping = aes(
fill = color,
data_id = atomic.number,
tooltip = tooltip
),
alpha = 0.01,
width = 1,
height = 1,
color = '#ffffff',
lwd = 0.3
)
girafe(
ggobj = p,
options = list(
opts_hover(
css = 'fill-width:3;'),
opts_hover_inv(
css = 'fill-opacity:0.2;'),
opts_tooltip(
css = str_c(
'background-color:white;',
'color:black;',
'font-size:8pt;',
'padding:10px;'
),
offx = 10,
offy = 10
)
)
)
blogdown:::serve_site()
knitr::kable(elements)
names(elements)
class(elements)
type(elements)
sapply(elements, class)
flextable(sapply(elements, class))
flextable(sapply(elements, class) %>% data.frame)
cbind(names(elements), sapply(elements, class)) %>% data.frame
cbind(names(elements), sapply(elements, class)) %>% data.frame %>% flextable()
cbind(names(elements), sapply(elements, class)) %>%
data.frame %>%
flextable(col_keys = c('P', 'V')) %>%
set_header_labels( X1 = 'Variable', X2 = 'Type' )
cbind(names(elements), sapply(elements, class)) %>%
data.frame %>%
flextable(col_keys = c('X1', 'X2')) %>%
set_header_labels( X1 = 'Variable', X2 = 'Type' )
blogdown:::serve_site()
flextable::color()
?flextable::color
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
cache = FALSE,
eval = TRUE)
cbind(names(elements), sapply(elements, class)) %>%
data.frame %>%
flextable(col_keys = c('X1', 'X2')) %>%
set_header_labels( X1 = 'Variable', X2 = 'Type' ) %>%
color(color = '#555555', part = 'all')
blogdown::check_config()
blogdown:::update_meta_addin()
blogdown:::serve_site()
?blogdown::build_site
?blogdown::build_site(build_rmd = TRUE)
blogdown::build_site(build_rmd = TRUE)
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
cache = FALSE,
eval = TRUE)
library(tidyverse)
library(flextable)
library(ggiraph)
data(list = 'elements', package = 'rbokeh')
element_type <- c(
"alkali metal", "alkaline earth metal", "halogen", "metal",
"metalloid", "noble gas", "nonmetal", "transition metal")
element_color <- c(
"#a6cee3", "#1f78b4", "#fdbf6f", "#b2df8a",
"#33a02c", "#bbbb88", "#baa2a6", "#e08e79")
elements <-
elements %>%
filter( !is.na(group) ) %>%
mutate(
across(.cols = group:atomic.mass, as.character),
atomic.mass = if_else(symbol == "Uus", " ", atomic.mass),
color = element_color[match(metal, element_type)],
type = metal
)
cbind(names(elements), sapply(elements, class)) %>%
data.frame %>%
flextable(col_keys = c('X1', 'X2')) %>%
set_header_labels( X1 = 'Variable', X2 = 'Type' ) %>%
color(color = '#777777', part = 'all')
tooltip_table <- function(...) {
data.frame(...) %>%
mutate( across(.cols = everything(), as.character) ) %>%
pivot_longer(cols = everything(), names_to = 'P', values_to = 'V') %>%
flextable(col_keys = c('P', 'V')) %>%
set_header_labels( P = '', V = '' ) %>%
fontsize(size = 8, part = 'all') %>%
line_spacing(space = 5, unit = 'mm', part = 'all') %>%
set_table_properties(layout = 'autofit') %>%
theme_alafoli() %>%
htmltools_value(ft.shadow = FALSE) %>%
as.character()
}
elements <-
elements %>%
rowwise() %>%
mutate(tooltip = tooltip_table(
name, type, atomic.mass, density, electronic.configuration,
boiling.point, melting.point, bonding.type)
) %>%
ungroup()
p <-
elements %>%
ggplot(
mapping = aes(group, period)
) +
theme_void() +
coord_equal() +
scale_x_discrete(limits = factor(1:18) ) +
scale_y_discrete(limits = factor(7:1) ) +
scale_fill_identity() +
# base color of each element square
geom_tile(
mapping = aes(
fill = color,
),
alpha = 0.6,
width = 1,
height = 1,
color = '#ffffff',
lwd = 0.3
) +
# add symbol to each square
geom_text_interactive(
mapping = aes(
label = symbol,
data_id = atomic.number
),
size = 7/.pt,
hjust = 0,
vjust = 0.5,
nudge_x = -0.4,
nudge_y = 0.04,
fontface = 'bold'
) +
# add atomic number to each square
geom_text_interactive(
mapping = aes(
label = atomic.number,
data_id = atomic.number
),
size = 4/.pt,
hjust = 0,
vjust = 0.5,
nudge_x = -0.4,
nudge_y = 0.35
) +
# add name to each square
geom_text_interactive(
mapping = aes(
label = name,
data_id = atomic.number
),
size = 3/.pt,
hjust = 0,
vjust = 0.5,
nudge_x = -0.4,
nudge_y = -0.2
) +
# add atomic mass to each square
geom_text_interactive(
mapping = aes(
label = atomic.mass,
data_id = atomic.number
),
size = 3/.pt,
hjust = 0,
vjust = 0.5,
nudge_x = -0.4,
nudge_y = -0.35
) +
# for mouseover, set alpha very low
geom_tile_interactive(
mapping = aes(
fill = color,
data_id = atomic.number,
tooltip = tooltip
),
alpha = 0.01,
width = 1,
height = 1,
color = '#ffffff',
lwd = 0.3
)
girafe(
ggobj = p,
options = list(
opts_hover(
css = 'fill-width:3;'),
opts_hover_inv(
css = 'fill-opacity:0.2;'),
opts_tooltip(
css = str_c(
'background-color:white;',
'color:black;',
'font-size:8pt;',
'padding:10px;'
),
offx = 10,
offy = 10
)
)
)
?theme_alafoli
get_flextable_defaults()
girafe(
ggobj = p,
options = list(
opts_hover(
css = 'fill-width:3;'),
opts_hover_inv(
css = 'fill-opacity:0.2;'),
opts_tooltip(
css = str_c(
'background-color:white;',
'color:black;',
'font:Helvetica',
'font-size:8pt;',
'padding:10px;'
),
offx = 10,
offy = 10
)
)
)
install.packages(c("bench", "brio", "cpp11", "credentials", "devtools", "fs", "ggdist", "glue", "gmailr", "pkgbuild", "pkgload", "readr", "remotes", "stringi", "vroom", "withr", "xml2"))
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::preview_site()
blogdown::install_hugo()
install.packages(c("distill", "nloptr", "raster", "roxygen2", "terra"))
install.packages(c("cachem", "ggbeeswarm", "graphlayouts", "rlang", "tidymodels", "vroom", "waldo"))
install.packages("blogdown")
blogdown::install_hugo()
blogdown:::serve_site()
blogdown:::new_post_addin()
install.packages("odds.converter")
install.packages("pinnacle.data")
devtools::install_github("ssp3nc3r/hsluv-rcpp", ref = "master")
devtools::install_github("ssp3nc3r/ggSankeyGrad", ref = "master")
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
install.packages("prodlim")
blogdown:::new_post_addin()
blogdown:::preview_site()
library(knitr)
opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE, cache=FALSE, eval=TRUE)
library(dplyr)
library(ggplot2)
library(splines)
library(cmdstanr)
library(ggthemes)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
register_knitr_engine()
blogdown:::serve_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::new_post_addin()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::serve_site()
blogdown:::preview_site()
unlink("content/post/2019-10-31-dynamic-systems-in-bayesian-models/index_cache", recursive = TRUE)
knit_with_parameters("/Volumes/PRO-BLADE/GitHub/sas/ssp3nc3r.github.io/content/post/2019-10-31-dynamic-systems-in-bayesian-models/index.Rmd")
blogdown:::serve_site()
blogdown:::preview_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
install.packages(c("downlit", "evaluate", "lamW", "lme4", "MASS", "modeldata", "nlme", "nloptr", "reticulate", "survival", "xfun"))
install.packages(c("modeldata", "nloptr", "reticulate"), type = 'source')
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
install.packages(c("cli", "digest", "prodlim"))
library(knitr)
opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
error = FALSE)
library(dplyr)          # organize data
library(odds.converter) # calculate betting percentages
library(rstanarm)       # fit model
library(ggplot2)        # make graphic
library(ggthemes)       # tufte theme settings on graphic
library(latex2exp)      # format latex equations on graphic
betting <- pinnacle.data::MLB2016 %>% # betting data available in package pinnacle.data
tidyr::unnest(cols = c(Lines)) %>%  # convert nested list to data.frame
group_by(GameID) %>%                # there are multiple betting data per game, so
arrange(EventDateTimeUTC) %>%       # arrange in time bets placed
slice(n()) %>%                      # and only keep last betting odds in each game
ungroup()                           # generally good to ungroup what you've grouped
GL2016 <- read.csv("data/GL2016.csv", header = FALSE, stringsAsFactors = FALSE)
gamelog_header <- read.csv("data/gamelog_header.csv")
names(GL2016) <- names(gamelog_header)
GL2016 <- GL2016 %>%
mutate(GameID = paste0(HomeTeam, Date, DoubleHeader))
df <- inner_join(betting, GL2016,
by = c("GameID" = "GameID"))
df <- df %>% arrange(GameID)
dodgers2016 <- df %>%
filter(HomeTeam.y == "LAN") %>% # only consider Dodgers home games
select(Date, Attendence, MoneyUS1, MoneyUS2,  # filter only columns plan to use
DayOfWeek, DayNight, FinalScoreHome, FinalScoreAway) %>%
mutate(is_win = FinalScoreHome > FinalScoreAway) %>% # calculate flag whether Dodgers won
mutate(winpct = cumsum(is_win) / row_number()) %>% # calculate win percent
mutate(winpct = lag(winpct)) %>% # get win percent of to prior game
filter(complete.cases(winpct))
dodgers2016$Pr_win <- 1 - with(dodgers2016, {
Pr <- t(apply(cbind(MoneyUS1, MoneyUS2), 1, FUN = odds.us2prob))
Pr <- Pr / rowSums(Pr)
Pr[,1]
})
dodgers2016$Pr_win2 <- dodgers2016$Pr_win * dodgers2016$Pr_win
?stan_glm
.55^2
rstan:::rstudio_stanc("attandence.stan")
rstan:::rstudio_stanc("attandence.stan")
rstan:::rstudio_stanc("attandence.stan")
rstan:::rstudio_stanc("attandence.stan")
rstan:::rstudio_stanc("attandence.stan")
m <- cmdstan_model('attendance.stan')
library(cmdstanr)
m <- cmdstan_model('attendance.stan')
dat <- dodgers2016 |>
select(attendance = Attendence, day = DayOfWeek, is_night = DayNight,
winpct, Pr_win) |>
mutate(
is_night = as.integer(is_night == 'N')
)
dat <- dodgers2016 |>
select(attendance = Attendence, day = DayOfWeek, is_night = DayNight,
winpct, Pr_win) |>
mutate(
day = as.integer(factor(day)),
is_night = as.integer(is_night == 'N')
)
dat <- dodgers2016 |>
select(attendance = Attendence, day = DayOfWeek, is_night = DayNight,
winpct, Pr_win) |>
mutate(
day = as.integer(factor(day)),
is_night = as.integer(is_night == 'N')
) |>
as.list()
dat$N <- length(dat$attendance)
dat <- dodgers2016 |>
select(attendance = Attendence, day = DayOfWeek, is_night = DayNight,
winpct, Pr_win) |>
mutate(
day = as.integer(factor(day)),
is_night = as.integer(is_night == 'N')
) |>
as.list()
dat$N <- length(dat$attendance)
m <- cmdstan_model('attendance.stan')
fit <- m$ample(data = dat)
fit <- m$sample(data = dat)
dat <- dodgers2016 |>
select(attendance = Attendence, day_idx = DayOfWeek, is_night = DayNight,
winpct, Pr_win) |>
mutate(
day_idx = as.integer(factor(day)),
is_night = as.integer(is_night == 'N')
) |>
as.list()
dat <- dodgers2016 |>
select(attendance = Attendence, day_idx = DayOfWeek, is_night = DayNight,
winpct, Pr_win) |>
mutate(
day_idx = as.integer(factor(day_idx)),
is_night = as.integer(is_night == 'N')
) |>
as.list()
dat$N <- length(dat$attendance)
m <- cmdstan_model('attendance.stan')
fit <- m$sample(data = dat)
fit
fit$summary()
m <- cmdstan_model('attendance.stan')
fit <- m$sample(data = dat)
fit$summary()
m <- cmdstan_model('attendance.stan')
fit <- m$sample(data = dat)
fit$summary()
m <- cmdstan_model('attendance.stan')
fit <- m$sample(data = dat)
fit$summary()
m <- cmdstan_model('attendance.stan')
fit <- m$sample(data = dat)
fit$summary()
m <- cmdstan_model('attendance.stan')
fit <- m$sample(data = dat)
fit$summary()
range(fit$draws(variables = 'opt_uncert'))
range(fit$draws(variables = 'opt_uncert', format = 'matrix'))
plot(density(fit$draws(variables = 'opt_uncert', format = 'matrix')))
str(fit$draws(variables = 'opt_uncert', format = 'matrix'))
fit$draws(variables = 'opt_uncert', format = 'df')
post <- fit$draws(variables = 'opt_uncert', format = 'df')
ggplot(post) + coord_cartesian(xlim = c(0, 1)) + geom_density(aes(opt_uncert))
m <- cmdstan_model('attendance.stan')
fit <- m$sample(data = dat)
options(mc.cores = 4)
fit <- m$sample(data = dat, max_treedepth = 11)
fit <- m$sample(data = dat, max_treedepth = 12)
fit$summary()
m <- cmdstan_model('attendance.stan')
fit <- m$sample(data = dat)
fit <- m$sample(data = dat, max_treedepth = 12)
fit$summary()
post <- fit$draws(variables = 'opt_uncert', format = 'df')
ggplot(post) + coord_cartesian(xlim = c(0, 1)) + geom_density(aes(opt_uncert))
ggplot(filter(post, opt_uncert > 0 & opt_uncert < 1)) + coord_cartesian(xlim = c(0, 1)) + geom_density(aes(opt_uncert))
ggplot(filter(post, opt_uncert > 0 & opt_uncert < 1)) + geom_density(aes(opt_uncert))
summary(post)
m <- cmdstan_model('attendance.stan')
fit <- m$sample(data = dat, max_treedepth = 12)
fit <- m$sample(data = dat, max_treedepth = 13)
post <- fit$draws(variables = 'opt_uncert', format = 'df')
ggplot(filter(post, opt_uncert > 0 & opt_uncert < 1)) + geom_density(aes(opt_uncert))
fit$summary()
install.packages("tseries")
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
install.packages(c("ggrepel", "matrixStats", "ragg", "RcppArmadillo", "sf", "sna"))
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
install.packages(c("broom", "car", "glue", "httr2", "huxtable", "lmom", "QuickJSR", "robustbase"))
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
